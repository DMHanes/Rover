`timescale 1ns / 1ps


module defense(clk,IN1,IN2,IN3,IN4);
  
input clk,IN1,IN2,IN3,IN4;

reg [1:0] state;
reg [28:0] count;
reg slower_clk;
reg slow_clk;

always@(posedge clk) begin
    if (count == 500000000) begin
        slow_clk = 1;
    end
    else begin
        slow_clk = 0;
        count = count + 1;
    end
    
    
assign slower_clk = slow_clk;

always @(posedge slower_clk)
    
    case(state)
    
`
    2'b00:begin
    //go forwards
    IN1=1;
    IN2=0;
    IN3=0;
    IN4=1;
    end
    
    2'b01: begin
    //backwards
    end

    
endmodule

module Flip_Flop(clk,D,Q);
    input clk,D;
    output reg Q=0;
    always @(posedge clk) begin
        Q=D;
    end
endmodule
// The above sets up a D-flip-flop that is used twice
// It is sets the left mic as the Clk input of the 1st D FF and the right mic as a D input
// The 2nd FF is set with the output of the 1st Q1 and the clk from the basys 2 board to sync the 
// input of the signals to the board to avoid timing issues with the FFs

module mic2(input clk,RightMic,LeftMic, output RvL);
    reg Neg_RMic = 0, Neg_LMic=0, Pos_RMic, Pos_LMic;
    wire Q1,L,R;
    wire RvL;

    // posegde and negedge the clock to work around not being able to update
    // the always block anytime the clk changes naturally
    always@(posedge clk) begin
        Pos_RMic=RightMic;
        Pos_LMic=LeftMic;
    end
    always@(negedge clk) begin
        Neg_RMic=RightMic;
        Neg_LMic=LeftMic;
    end
    assign L = Pos_LMic|Neg_LMic;
    assign R = Pos_RMic|Neg_RMic;
    
    Flip_Flop S0(L,R,Q1);
    Flip_Flop S1(clk,Q1,RvL);
    
endmodule
    
module seven_seg( 

    input clk, reset, //default 1 bit 

    input SW2, // direction control switch 

    input SW7, //turn 7-seg on/off 

    input overCurrentA , overCurrentB, //overcurrent voltage 

    output a, b, c, d, e, f, g, dp, //the individual LED output for the seven segment along with the digital point 

    output [3:0] an  //the 4 bit enable signal 

); 

 //dirF=SW2
 //dirB=~SW2

localparam N = 18;  //value 18 assigned to parameter N 

reg [N-1:0]count; //the 18 bit counter which allows us to multiplex at 1000Hz; 2 MSB moves position 

reg [6:0]sseg = 0; //the 7 bit register to hold the data to output 

reg [3:0]an_temp = 4'b1110; //register for the 4 bit enable 

 

//always @ (posedge clk or posedge reset) //rising edge of pulse; using the 100MHz clock to count; fills up counter for multiplexing 

//  begin  

//  if (reset) 

//    count <= 0; 

//  else 

//   count <= count + 1; 

// end 

 

//always @ (posedge clk) 

// begin 

//  case(count[N-1:N-2]) //using only the 2 MSB's of the counter; 17 & 16 

//   2'b00 :  //When the 2 MSB's are 00 enable the fourth display 

//    begin 

//     an_temp = 4'b1110; 

//    end 

    

//   2'b01:  //When the 2 MSB's are 01 enable the third display 

//    begin 

//     an_temp = 4'b1101; 

//    end 

    

//   2'b10:  //When the 2 MSB's are 10 enable the second display 

//    begin 

//     an_temp = 4'b1011; 

//    end 

     

//   2'b11:  //When the 2 MSB's are 11 enable the first display 

//    begin 

//     an_temp = 4'b0111; 

//    end 

//  endcase 

// end //manipulate the register and then assign to the output that it corresponds to  

 

reg [6:0] sseg_temp; //7 bit register to hold the binary value of each input given 

 

always @ (posedge clk) //anytime anything changes you have to do what is in the begin 

 begin 

  case(an_temp) 

   4'b1110 : begin 
        an_temp <= 4'b1101;

        if(overCurrentA == 0 && SW7 == 1 || overCurrentB == 0 && SW7 == 1)  

            sseg_temp = 7'b1000000; //to display 0 

        else sseg_temp = 7'b1111111; 

   end 

   4'b1101 : begin 
        an_temp <= 4'b1011;
        
        if(overCurrentA == 1 && SW7 == 1 || overCurrentB ==1 && SW7 ==1)  

            sseg_temp = 7'b1111001; 

        else sseg_temp = 7'b1111111; //to display 1 

   end 

   4'b1011 : begin  
        an_temp <= 4'b0111;
        
        if(SW2 == 0 && SW7 == 1)  

            sseg_temp = 7'b0000011; //to display b 

        else sseg_temp = 7'b1111111; 

   end 

   4'b0111 : begin  
        an_temp <= 4'b1110;

        if (SW2 == 1 && SW7 == 1)  

            sseg_temp = 7'b0001110; 

        else sseg_temp = 7'b1111111; //to display f 

   end 

   //default : sseg_temp = 7'b1111111; //dash 

  endcase 

 end 

  

assign {g, f, e, d, c, b, a} = sseg_temp; //concatenate the outputs to the register, this is just a more neat way of doing this. 

// I could have done in the case statement: 4'd0 : {g, f, e, d, c, b, a} = 7'b1000000;  

// its the same thing.. write however you like it 

assign dp = 1'b1; //since the decimal point is not needed, all 4 of them are turned off 

assign an = an_temp; 

 

endmodule 
module PWM(clk,SW0,SW1,SW2,overCurrent,F,IPS1,IPS2,LED_1,LED_2); 

    input clk,SW0,SW1,SW2,overCurrent,IPS1,IPS2;       
    output F,LED_1,LED_2;
    reg A=0;                                   
    reg B=0;
    
    
    always@(posedge clk)begin
        A<=B;
        B<=~A;    
    
    end

    
    assign F = (SW0 & SW1 | SW1 & ~A | SW0 & ~A | SW0 &B) & ~overCurrent & IPS1 & IPS2;      
    assign LED_1 = IPS1;
    assign LED_2 = IPS2;

endmodule

module movement(clk,IN1,IN2,IN3,IN4,control);

input clk,control;

output reg IN1,IN2,IN3,IN4;

reg [2:0] state;
reg slow_clk;
reg [28:0] count;

wire slower_clk;

initial begin
    state=0;
    IN1=0;
    IN2=0;
    IN3=0;
    IN4=0;
    count = 0;
end


always@(posedge clk)

case(state)//????????????????????????????????

//decide
4'b0000: begin
    if (control==0) //L
        state <= 4'b0001; //L state
    else if (control == 1 )//R
        state <= 4'b0010;
    else
        state <= 4'b0011;
end

//L state
4'b0001: begin

   IN1=0;
   IN2=1;
   IN3=0;
   IN4=1;
    
    if (control==0) //L
        state <= 4'b0001; //L state
    else if (control == 1 )//R
        state <= 4'b0010;
    else
        state <= 4'b0011;
    
end

//R state
4'b0010: begin

   IN1=1;
   IN2=0;
   IN3=1;
   IN4=0;
    
    if (control==0) //L
        state <= 4'b0001; //L state
    else if (control == 1 )//R
        state <= 4'b0010;
    else
        state <= 4'b0011;
end

//straight default case
4'b00111: begin

   IN1=1;
   IN2=0;
   IN3=0;
   IN4=1;
    
    if (control==0) //L
        state <= 4'b0001; //L state
    else if (control == 1 )//R
        state <= 4'b0010;
    else
        state <= 4'b0011;
    
end


endcase

endmodule


module top(clk, SW0, SW1, SW2, SW3, SW4, SW5, ENA, ENB, IN1,IN2,IN3,IN4, SW7, a, b, c, d, e, f, g, dp, an, reset,SW13, SW14, SW15, IPS1,IPS2,LED_1,LED_2,overCurrentA,overCurrentB,RightMic,LeftMic,control);
    input clk, SW0, SW1, SW2, SW3, SW4, SW5, SW7, reset, SW13, SW14, SW15,IPS1,IPS2, overCurrentA, overCurrentB,RightMic,LeftMic,control;
    output ENA, ENB, IN1, IN2, IN3, IN4, LED_1,LED_2, a, b, c, d, e, f, g, dp;
    output [3:0] an;
    
    wire SLOW_CLK;
    wire LED_CLK;
    wire RvL;

    reg [16:0] SLOW_CLK_COUNTER = 0;
    always @(posedge clk) begin
        SLOW_CLK_COUNTER <= SLOW_CLK_COUNTER + 1;
    end
    assign SLOW_CLK = SLOW_CLK_COUNTER[8];
    assign LED_CLK  = SLOW_CLK_COUNTER[15];
   
 

    PWM PWMA(SLOW_CLK, SW1, SW0, SW5, overCurrentA, ENA,IPS1,IPS2,LED_1,LED_2);
    PWM PWMB(SLOW_CLK, SW4, SW3, SW2, overCurrentB, ENB,IPS1,IPS2,LED_1,LED_2);

    movement MOVE(clk,IN1,IN2,IN3,IN4,RvL);

    seven_seg SEVEN_SEG(LED_CLK, reset, SW2, SW7, a, b, c, d, e, f, g, dp, an);
    
    
endmodule



